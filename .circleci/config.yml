version: 2.1
orbs:
  node: circleci/node@4.0.0
  cloudfoundry: circleci/cloudfoundry@0.1.73
executors:
  docker-executor:
    # for docker you must specify an image to use for the primary container
    docker:
      - image: circleci/node:12.18
parameters:
  cg_org:
    description: "Cloud Foundry cloud.gov organization name"
    default: "hhs-acf-prototyping"
    type: string
  cg_api:
    description: "URL of Cloud Controller in Cloud Foundry cloud.gov instance"
    default: "https://api.fr.cloud.gov"
    type: string
  prod_git_url:
    default: "https://github.com/HHS/Head-Start-TTADP"
    type: string
  staging_git_url:
    default: "https://github.com/HHS/Head-Start-TTADP"
    type: string
  dev_git_url:
    default: "https://github.com/adhocteam/Head-Start-TTADP"
    type: string
  prod_git_branch:
    default: "production"
    type: string
  staging_git_branch:
    default: "main"
    type: string
  dev_git_branch:
    default: "main"
    type: string
  sandbox_git_branch:
    default: "sj-cd-init"
    type: string
jobs:
  build:
    # Each job must declare an executor
    executor: docker-executor
    steps:
      - checkout
      - run: yarn deps
      - persist_to_workspace:
          root: .
          paths:
            - .
  lint_backend_and_frontend:
    executor: docker-executor
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Lint backend and frontend
          command: yarn run lint:ci && cd frontend && yarn run lint:ci
      - store_artifacts:
          path: reports
      - store_artifacts:
          path: frontend/reports
  test_backend:
    executor: docker-executor
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Test backend
          command: yarn run test:ci
      - store_test_results:
          path: reports/
      - store_artifacts:
          path: coverage/
  test_frontend:
    executor: docker-executor
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Test frontend
          command: cd frontend && yarn run test:ci
      - store_test_results:
          path: frontend/reports/
      - store_artifacts:
          path: frontend/coverage/

  deploy:
    executor: docker-executor
    steps:
      - attach_workspace:
          at: .
      - run: curl -v -L -o cf-cli_amd64.deb 'https://cli.run.pivotal.io/stable?release=debian64&source=github'
      - run: sudo dpkg -i cf-cli_amd64.deb
      - run:
          name: Login with service account
          command: cf login -a << pipeline.parameters.cg_api >> -u $CLOUDGOV_DEPLOYER_USERNAME -p $CLOUDGOV_DEPLOYER_PASSWORD -o << pipeline.parameters.cg_org >> -s $CLOUDGOV_SPACE
      - when:
          condition:
            and:
              - equal: [<< pipeline.project.git_url >>, << pipeline.parameters.dev_git_url >>]
              - equal: [<< pipeline.git.branch >>, << pipeline.parameters.sandbox_git_branch >>]
          steps:
            - run:
                name: Push application to sandbox
                command: cf push --vars-file deployment_config/dev_vars.yml
      - when:
          condition:
            and:
              - equal: [<< pipeline.project.git_url >>, << pipeline.parameters.dev_git_url >>]
              - equal: [<< pipeline.git.branch >>, << pipeline.parameters.dev_git_branch >>]
          steps:
            - run:
                name: Push application to dev
                command: cf push --vars-file deployment_config/dev_vars.yml
      - when:
          condition:
            and:
              - equal: [<< pipeline.project.git_url >>, << pipeline.parameters.staging_git_url >>]
              - equal: [<< pipeline.git.branch >>, << pipeline.parameters.staging_git_branch >>]
          steps:
            - run:
                name: Push application to staging
                command: cf push --vars-file deployment_config/staging_vars.yml
      - when:
          condition:
            and:
              - equal: [<< pipeline.project.git_url >>, << pipeline.parameters.prod_git_url >>]
              - equal: [<< pipeline.git.branch >>, << pipeline.parameters.prod_git_branch >>]
          steps:
            - run:
                name: Push application to prod
                command: cf push --vars-file deployment_config/prod_vars.yml
workflows:
  build_and_test:
    jobs:
      - build
      - lint_backend_and_frontend:
          requires:
            - build
      - test_backend:
          requires:
            - build
      - test_frontend:
          requires:
            - build
  build:
    when:
      condition:
        or:
          - equal: [<< pipeline.git.branch >>, << pipeline.parameters.sandbox_git_branch >>]
          - equal: [<< pipeline.git.branch >>, << pipeline.parameters.dev_git_branch >>]
          - equal: [<< pipeline.git.branch >>, << pipeline.parameters.staging_git_branch >>]
          - equal: [<< pipeline.git.branch >>, << pipeline.parameters.prod_git_branch >>]
    jobs:
      - deploy
